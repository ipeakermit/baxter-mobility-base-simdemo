#!/bin/bash

source ~/rosie/rosenv.gazebo.bash

set -xv

#source ~/rosie/xsetup

#cd ~/ws_baxter

#export MB_LASER_BIRDCAGE_R2000=1
#export MB_LASER_BIRDCAGE_R2000_FREQ=50
#export MB_LASER_BIRDCAGE_R2000_SAMPLES=3600

~/rosie/installconfig

#{ sleep 3 ; tail -f ~/.ros/log/latest/* ; sleep 10; /root/rosie/checkconfig ; } &

# triggered by /rosout_agg.function == "GazeboRosVideo::Load"

#exitscript=false

function cleanup()
{
    while kill -INT $ROS_PID; do 
      echo "**** simstart: cleanup PID $ROS_PID ****"
      killall gzserver
      sleep 5
    done
    #exitscript=true
    echo "**** simstart: exit ****"
    exit
}
trap cleanup EXIT SIGINT SIGTERM

#export LIBGL_ALWAYS_INDIRECT=1
#export LIBGL_ALWAYS_SOFTWARE=1
export QT_X11_NO_MITSHM=1

case $BAXTER_ONLY in
  "true") roslaunch baxter_gazebo baxter_world.launch &
  ;;
  *) roslaunch ~/rosie/vxlab_sim.launch baxter:=true paused:=true &
  ;;
esac

ROS_PID=$!
echo "**** roslaunch PID is $ROS_PID ****"

# await Simulator load
# await "GazeboRosVideo ... has started"
~/rosie/await_video_ready.py || cleanup
echo "**** prepsim: await_simstart succeeded ****"
rostopic pub /rosie/sim/events std_msgs/String 'GazeboRosVideo started' -1

~/rosie/check-config

echo "Tucking arms..."
~/rosie/tuck_presim
rostopic pub /rosie/sim/events std_msgs/String 'Arms pre-tucked' -1

sleep 3
echo "Unpausing..."
rosservice call gazebo/unpause_physics
echo "Unpaused"

echo "Untucking arms..."
~/rosie/untuck || exit 1
echo "Arms untucked"

echo "Spawning objects..."
~/rosie/spawn
rostopic pub /rosie/sim/events std_msgs/String 'Objects spawned' -1
echo "Objects spawned"

# center head
~/rosie/headcentre &

# TO DO: make headcentre synchronous / reliable
sleep 5
~/rosie/await_simulator_is_loaded.py || cleanup
rostopic pub /rosie/sim/events std_msgs/String 'Sim started' -1

#date > packages.log
#./aptlist >> packages.log

#sleep 30
#gzclient &
#rviz &

while true
do
  sleep 3600 || cleanup
done
